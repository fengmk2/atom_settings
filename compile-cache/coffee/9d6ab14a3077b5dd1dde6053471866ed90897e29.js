(function() {
  var TabsToSpaces, fs, helper, path, temp;

  fs = require('fs');

  path = require('path');

  temp = require('temp');

  TabsToSpaces = require('../lib/tabs-to-spaces');

  helper = require('./spec-helper');

  describe('Tabs to Spaces', function() {
    var directory, editor, filePath, workspaceElement, _ref;
    _ref = [], directory = _ref[0], editor = _ref[1], filePath = _ref[2], workspaceElement = _ref[3];
    beforeEach(function() {
      directory = temp.mkdirSync();
      atom.project.setPaths(directory);
      workspaceElement = atom.views.getView(atom.workspace);
      filePath = path.join(directory, 'tabs-to-spaces.txt');
      fs.writeFileSync(filePath, '');
      atom.config.set('editor.tabLength', 4);
      waitsForPromise(function() {
        return atom.workspace.open(filePath).then(function(e) {
          return editor = e;
        });
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('tabs-to-spaces');
      });
      return waitsForPromise(function() {
        return atom.packages.activatePackage('language-javascript');
      });
    });
    describe('activate', function() {
      return it('creates the commands', function() {
        expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:tabify')).toBeTruthy();
        expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:untabify')).toBeTruthy();
        return expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:untabify-all')).toBeTruthy();
      });
    });
    describe('deactivate', function() {
      beforeEach(function() {
        return atom.packages.deactivatePackage('tabs-to-spaces');
      });
      return it('destroys the commands', function() {
        expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:tabify')).toBeFalsy();
        expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:untabify')).toBeFalsy();
        return expect(helper.hasCommand(workspaceElement, 'tabs-to-spaces:untabify-all')).toBeFalsy();
      });
    });
    describe('tabify', function() {
      beforeEach(function() {
        return editor.setTabLength(3);
      });
      it('does not change an empty file', function() {
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('');
      });
      it('does not change spaces at the end of a line', function() {
        editor.setText('foobarbaz     ');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('foobarbaz     ');
      });
      it('does not change spaces in the middle of a line', function() {
        editor.setText('foo  bar  baz');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('foo  bar  baz');
      });
      it('converts one tab worth of spaces to a tab', function() {
        editor.setTabLength(2);
        editor.setText('  foo');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('\tfoo');
      });
      it('converts almost two tabs worth of spaces to one tab and some spaces', function() {
        editor.setTabLength(4);
        editor.setText('       foo');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('\t   foo');
      });
      it('changes multiple lines of leading spaces to tabs', function() {
        editor.setTabLength(4);
        editor.setText('    foo\n       bar');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('\tfoo\n\t   bar');
      });
      it('leaves successive newlines alone', function() {
        editor.setTabLength(2);
        editor.setText('  foo\n\n  bar\n\n  baz\n\n');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('\tfoo\n\n\tbar\n\n\tbaz\n\n');
      });
      return it('changes mixed spaces and tabs to uniform whitespace', function() {
        editor.setTabLength(2);
        editor.setText('\t \tfoo\n');
        TabsToSpaces.tabify(editor);
        return expect(editor.getText()).toBe('\t\t foo\n');
      });
    });
    describe('untabify', function() {
      beforeEach(function() {
        return editor.setTabLength(3);
      });
      it('does not change an empty file', function() {
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('');
      });
      it('does not change tabs at the end of a string', function() {
        editor.setText('foobarbaz\t');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('foobarbaz\t');
      });
      it('does not change tabs in the middle of a string', function() {
        editor.setText('foo\tbar\tbaz');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('foo\tbar\tbaz');
      });
      it('changes one tab to the correct number of spaces', function() {
        editor.setTabLength(2);
        editor.setText('\tfoo');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('  foo');
      });
      it('changes two tabs to the correct number of spaces', function() {
        editor.setTabLength(2);
        editor.setText('\t\tfoo');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('    foo');
      });
      it('changes multiple lines of leading tabs to spaces', function() {
        editor.setTabLength(2);
        editor.setText('\t\tfoo\n\t\tbar\n\n');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('    foo\n    bar\n\n');
      });
      return it('changes mixed spaces and tabs to uniform whitespace', function() {
        editor.setTabLength(2);
        editor.setText(' \t foo\n');
        TabsToSpaces.untabify(editor);
        return expect(editor.getText()).toBe('    foo\n');
      });
    });
    describe('untabify all', function() {
      beforeEach(function() {
        return editor.setTabLength(3);
      });
      it('does not change an empty file', function() {
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('');
      });
      it('does change tabs at the end of a string', function() {
        editor.setText('foobarbaz\t');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('foobarbaz   ');
      });
      it('does change tabs in the middle of a string', function() {
        editor.setText('foo\tbar\tbaz');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('foo   bar   baz');
      });
      it('changes one tab to the correct number of spaces', function() {
        editor.setTabLength(2);
        editor.setText('\tfoo');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('  foo');
      });
      it('changes two tabs to the correct number of spaces', function() {
        editor.setTabLength(2);
        editor.setText('\t\tfoo');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('    foo');
      });
      it('changes multiple lines of leading tabs to spaces', function() {
        editor.setTabLength(2);
        editor.setText('\t\tfoo\n\t\tbar\n\n');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('    foo\n    bar\n\n');
      });
      return it('changes mixed spaces and tabs to uniform whitespace', function() {
        editor.setTabLength(2);
        editor.setText(' \t foo\n');
        TabsToSpaces.untabifyAll(editor);
        return expect(editor.getText()).toBe('    foo\n');
      });
    });
    describe('on save', function() {
      beforeEach(function() {
        return atom.config.set('tabs-to-spaces.onSave', 'none');
      });
      it('will untabify before an editor saves a buffer', function() {
        atom.config.set('tabs-to-spaces.onSave', 'untabify');
        editor.setText('\t\tfoo\n\t\tbar\n\n');
        editor.save();
        return expect(editor.getText()).toBe('        foo\n        bar\n\n');
      });
      it('will tabify before an editor saves a buffer', function() {
        atom.config.set('tabs-to-spaces.onSave', 'tabify');
        editor.setText('        foo\n        bar\n\n');
        editor.save();
        return expect(editor.getText()).toBe('\t\tfoo\n\t\tbar\n\n');
      });
      return describe('with scope-specific configuration', function() {
        beforeEach(function() {
          atom.config.set('editor.tabLength', 2, {
            scope: '.text.plain'
          });
          atom.config.set('tabs-to-spaces.onSave', 'tabify', {
            scope: '.text.plain'
          });
          filePath = path.join(directory, 'sample.txt');
          fs.writeFileSync(filePath, 'Some text.\n');
          waitsForPromise(function() {
            return atom.workspace.open(filePath).then(function(e) {
              return editor = e;
            });
          });
          return runs(function() {
            var buffer;
            return buffer = editor.getBuffer();
          });
        });
        it('respects the overridden configuration', function() {
          editor.setText('    foo\n    bar\n\n');
          editor.save();
          return expect(editor.getText()).toBe('\t\tfoo\n\t\tbar\n\n');
        });
        return it('does not modify the contents of the user configuration file', function() {
          spyOn(atom.config, 'getUserConfigPath').andReturn(filePath);
          spyOn(editor, 'getPath').andReturn(filePath);
          editor.setText('    foo\n    bar\n\n');
          editor.save();
          return expect(editor.getText()).toBe('    foo\n    bar\n\n');
        });
      });
    });
    return describe('invariants', function() {
      beforeEach(function() {
        return editor.setText(fs.readFileSync(__filename, 'utf8'));
      });
      return it('does not move the position of the cursor', function() {
        var pos;
        editor.setCursorBufferPosition([0, 5]);
        TabsToSpaces.tabify(editor);
        TabsToSpaces.untabify(editor);
        pos = editor.getCursorBufferPosition();
        expect(pos.row).toBe(0);
        return expect(pos.column).toBe(5);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/mk2/.atom/packages/tabs-to-spaces/spec/tabs-to-spaces-spec.coffee
