var DocsParser = require('../docsparser');
var xregexp = require('../xregexp').XRegExp;

function RustParser(settings) {
    DocsParser.call(this, settings);
}

RustParser.prototype = Object.create(DocsParser.prototype);

RustParser.prototype.setup_settings = function () {
    this.settings = {
        'curlyTypes': false,
        'typeInfo': false,
        'typeTag': false,
        'varIdentifier': '.*',
        'fnIdentifier': '.*',
        'fnOpener': '^\\s*fn',
        'commentCloser': ' */',
        'bool': 'Boolean',
        'function': 'Function'
    };
};

RustParser.prototype.parse_function = function (line) {
    var regex = xregexp('\\s*fn\\s+(?P<name>\\S+)');
    var matches = xregexp.exec(line, regex);
    if (matches === null) return null;
    var name = [].join(matches.name);
    return [name, []];
};

RustParser.prototype.format_function = function (name, args) {
    return name;
};

module.exports = RustParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tazIvLmF0b20vcGFja2FnZXMvZG9jYmxvY2tyL2xpYi9sYW5ndWFnZXMvcnVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQzs7QUFFNUMsU0FBUyxVQUFVLENBQUMsUUFBUSxFQUFFO0FBQzFCLGNBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ25DOztBQUVELFVBQVUsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRTNELFVBQVUsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVc7QUFDN0MsUUFBSSxDQUFDLFFBQVEsR0FBRztBQUNaLG9CQUFZLEVBQUUsS0FBSztBQUNuQixrQkFBVSxFQUFFLEtBQUs7QUFDakIsaUJBQVMsRUFBRSxLQUFLO0FBQ2hCLHVCQUFlLEVBQUUsSUFBSTtBQUNyQixzQkFBYyxFQUFHLElBQUk7QUFDckIsa0JBQVUsRUFBRSxTQUFTO0FBQ3JCLHVCQUFlLEVBQUUsS0FBSztBQUN0QixjQUFNLEVBQUUsU0FBUztBQUNqQixrQkFBVSxFQUFFLFVBQVU7S0FDekIsQ0FBQztDQUNMLENBQUM7O0FBRUYsVUFBVSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDakQsUUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDaEQsUUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEMsUUFBRyxPQUFPLEtBQUssSUFBSSxFQUNmLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLFFBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFdBQU8sQ0FBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDdEIsQ0FBQzs7QUFFRixVQUFVLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxVQUFTLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDcEQsV0FBTyxJQUFJLENBQUM7Q0FDbkIsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbWsyLy5hdG9tL3BhY2thZ2VzL2RvY2Jsb2Nrci9saWIvbGFuZ3VhZ2VzL3J1c3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRG9jc1BhcnNlciA9IHJlcXVpcmUoXCIuLi9kb2NzcGFyc2VyXCIpO1xudmFyIHhyZWdleHAgPSByZXF1aXJlKCcuLi94cmVnZXhwJykuWFJlZ0V4cDtcblxuZnVuY3Rpb24gUnVzdFBhcnNlcihzZXR0aW5ncykge1xuICAgIERvY3NQYXJzZXIuY2FsbCh0aGlzLCBzZXR0aW5ncyk7XG59XG5cblJ1c3RQYXJzZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShEb2NzUGFyc2VyLnByb3RvdHlwZSk7XG5cblJ1c3RQYXJzZXIucHJvdG90eXBlLnNldHVwX3NldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICAgICAgJ2N1cmx5VHlwZXMnOiBmYWxzZSxcbiAgICAgICAgJ3R5cGVJbmZvJzogZmFsc2UsXG4gICAgICAgICd0eXBlVGFnJzogZmFsc2UsXG4gICAgICAgICd2YXJJZGVudGlmaWVyJzogJy4qJyxcbiAgICAgICAgJ2ZuSWRlbnRpZmllcic6ICAnLionLFxuICAgICAgICAnZm5PcGVuZXInOiAnXlxcXFxzKmZuJyxcbiAgICAgICAgJ2NvbW1lbnRDbG9zZXInOiAnICovJyxcbiAgICAgICAgJ2Jvb2wnOiAnQm9vbGVhbicsXG4gICAgICAgICdmdW5jdGlvbic6ICdGdW5jdGlvbidcbiAgICB9O1xufTtcblxuUnVzdFBhcnNlci5wcm90b3R5cGUucGFyc2VfZnVuY3Rpb24gPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHJlZ2V4ID0geHJlZ2V4cCgnXFxcXHMqZm5cXFxccysoP1A8bmFtZT5cXFxcUyspJyk7XG4gICAgdmFyIG1hdGNoZXMgPSB4cmVnZXhwLmV4ZWMobGluZSwgcmVnZXgpO1xuICAgIGlmKG1hdGNoZXMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHZhciBuYW1lID0gW10uam9pbihtYXRjaGVzLm5hbWUpO1xuICAgIHJldHVybiBbIG5hbWUsIFtdXTtcbn07XG5cblJ1c3RQYXJzZXIucHJvdG90eXBlLmZvcm1hdF9mdW5jdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1c3RQYXJzZXI7XG4iXX0=